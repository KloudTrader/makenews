<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="77">
  <server artifactsdir="artifacts" commandRepositoryLocation="default" serverId="93ec79c6-d7ee-4aec-b499-5c0d884af44a">
    <security>
      <passwordFile path="/var/lib/go-server/passwd-file" />
    </security>
    <mailhost hostname="46.101.245.151" port="8153" username="admin" tls="false" from="pranathb@thoughtworks.com" admin="mediacenter@thoughtworks.com" />
  </server>
  <pipelines group="MediaCenter">
    <pipeline name="ServerTests" isLocked="false" template="build_template">
      <params>
        <param name="branch">master</param>
      </params>
      <environmentvariables>
        <variable name="branch">
          <value>master</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git@github.com:media-centre/ContentDiscovery.git" branch="#{branch}" dest="trunk" materialName="ContentDiscovery" />
      </materials>
    </pipeline>
    <pipeline name="DevelopmentDeployment" template="DevelopmentDeployment">
      <materials>
        <pipeline pipelineName="ServerTests" stageName="build" materialName="build" />
      </materials>
    </pipeline>
    <pipeline name="QaDeployment" isLocked="false">
      <environmentvariables>
        <variable name="NODE_ENV">
          <value>ci_qa</value>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="DevelopmentDeployment" stageName="StartServer" materialName="Development" />
      </materials>
      <stage name="StartServer">
        <approval type="manual" />
        <jobs>
          <job name="UntarAndStartServer">
            <environmentvariables>
              <variable name="NODE_ENV">
                <value>qa</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="DevelopmentDeployment" stage="StartServer" job="UntarAndStartServer" srcfile="dist.tar.gz" dest="trunk">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar -xzf dist.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/deployment.yml -u go -i ./dist/ansible/deployment/inventories/qa -c local</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="HardeningTests" isLocked="false">
      <materials>
        <pipeline pipelineName="QaDeployment" stageName="StartServer" />
      </materials>
      <stage name="fetchPackage">
        <approval type="manual" />
        <jobs>
          <job name="getPackageFromQA">
            <tasks>
              <fetchartifact pipeline="QaDeployment" stage="StartServer" job="UntarAndStartServer" srcfile="dist.tar.gz" dest="trunk/">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="trunk/">
                <arg>-c</arg>
                <arg>tar -xzf dist.tar.gz</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="newsClick">
    <pipeline name="newsClickQA">
      <materials>
        <git url="git@newsClickPreProd:media-centre/newsClickNew.git" />
      </materials>
      <stage name="npmInstall">
        <jobs>
          <job name="npmInstall">
            <tasks>
              <exec command="npm">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="compileSASS">
        <jobs>
          <job name="gulpSass">
            <tasks>
              <exec command="gulp">
                <arg>sass</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="drushImport">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush config-import --yes</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush cr</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="galen_test">
        <jobs>
          <job name="galen">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>Xvfb &amp;</arg>
                <arg>xvfb-run galen test sample.test.js</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="newsClickPreProd" isLocked="false">
      <materials>
        <git url="git@newsClickPreProd:media-centre/newsClickNew.git" />
      </materials>
      <stage name="sassCompile">
        <approval type="manual" />
        <jobs>
          <job name="npmInstall">
            <tasks>
              <exec command="npm">
                <arg>install</arg>
              </exec>
            </tasks>
          </job>
          <job name="gulpSass">
            <tasks>
              <exec command="gulp">
                <arg>sass</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush sql-dump --result-file=/usr/local/drupal_bak/newsclick.sql</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush config-import --yes</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush cr</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="newsClickProd" isLocked="false">
      <materials>
        <git url="git@newsClickPreProd:media-centre/newsClickNew.git" branch="Release-1.0" />
      </materials>
      <stage name="sassCompile">
        <approval type="manual" />
        <jobs>
          <job name="npmInstall">
            <tasks>
              <exec command="npm">
                <arg>install</arg>
              </exec>
              <exec command="gulp">
                <arg>sass</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="drushCommands">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush config-import --yes</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush config-set system.performance css.preprocess 1 -y</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush config-set system.performance js.preprocess 1 -y</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush cr</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Production">
    <pipeline name="ReleaseBuildTests">
      <environmentvariables>
        <variable name="branch">
          <value>Release-3.0</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git@github.com:media-centre/ContentDiscovery.git" branch="Release-3.0" dest="trunk" />
      </materials>
      <stage name="StaticCodeAnalyser">
        <jobs>
          <job name="eslint">
            <tasks>
              <exec command="gulp" workingdir="trunk">
                <arg>eslint</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="build">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>./build.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar czf ./dist.tar.gz ./dist</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="ServerTests">
        <environmentvariables>
          <variable name="NODE_ENV">
            <value>ci-server-tests</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="ServerTests">
            <tasks>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar czf dist.tar.gz dist</arg>
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>/etc/ContentDiscovery/delete_fake_server_cleanly.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/deployment.yml -u go -i ./dist/ansible/deployment/inventories/prod-unit-tests -c local</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>pm2 start --name ContentDiscoveryFakeServer ./testserver/server.js</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>gulp functional:test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="UnitTest">
        <jobs>
          <job name="unit-test">
            <tasks>
              <exec command="gulp" workingdir="trunk">
                <arg>test</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ReleaseDevBox" isLocked="false">
      <materials>
        <pipeline pipelineName="ReleaseBuildTests" stageName="build" />
      </materials>
      <stage name="StartServer">
        <approval type="manual" />
        <environmentvariables>
          <variable name="NODE_ENV">
            <value>ci_prod_dev_box</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="AnsibleDeploymentTask">
            <environmentvariables>
              <variable name="NODE_ENV">
                <value>ci_prod_dev_box</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="ReleaseBuildTests" stage="build" job="build" srcfile="dist.tar.gz" dest="trunk">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar -xzf dist.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/deployment.yml -u go -i ./dist/ansible/deployment/inventories/prod-dev-box -c local</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="PreprodDeployment">
      <materials>
        <pipeline pipelineName="ReleaseDevBox" stageName="StartServer" />
      </materials>
      <stage name="StartServer" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="AnsibleDeploymentTask">
            <tasks>
              <fetchartifact pipeline="ReleaseDevBox" stage="StartServer" job="AnsibleDeploymentTask" srcfile="dist.tar.gz" dest="trunk">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar -xzf dist.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/deployment.yml -u go -i ./dist/ansible/deployment/inventories/pre-prod -c local</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ProductionDeployment">
      <materials>
        <pipeline pipelineName="PreprodDeployment" stageName="StartServer" materialName="build" />
      </materials>
      <stage name="StartServer" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="AnsibleDeploymentTask">
            <tasks>
              <fetchartifact pipeline="PreprodDeployment" stage="StartServer" job="AnsibleDeploymentTask" srcfile="dist.tar.gz" dest="trunk">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar -xzf dist.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/deployment.yml -u go -i ./dist/ansible/deployment/inventories/production -c local</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="newInternationalist">
    <pipeline name="QA">
      <materials>
        <git url="git@newInt:media-centre/newInt.git" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="ls" />
              <exec command="bash">
                <arg>-c</arg>
                <arg>drush features-update-all</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="CUCUMBER_TEST_GROUP">
    <pipeline name="CUCUMBER_TESTS_DEV_ENV" isLocked="false">
      <environmentvariables>
        <variable name="envFile">
          <value>dev_envfile</value>
        </variable>
        <variable name="admin" secure="true">
          <encryptedValue>ZD2tpQViKMsENK8vB3OC6w==</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <svn url="https://github.com/media-centre/MCCucumberTests.git" username="PranathiB" encryptedPassword="bl3EoVprCReqkT263MzRUQ==" materialName="CUCUMBER_TESTS" />
      </materials>
      <stage name="MAVEN_STAGE">
        <approval type="manual" />
        <jobs>
          <job name="MAVEN_COMPILE">
            <tasks>
              <exec command="mvn" workingdir="trunk/">
                <arg>compile</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="DEV_RUN_STAGE">
        <jobs>
          <job name="TEST_ON_CHROME_BROWSER">
            <environmentvariables>
              <variable name="browser">
                <value>chrome</value>
              </variable>
              <variable name="admin" secure="true">
                <encryptedValue>ZD2tpQViKMsENK8vB3OC6w==</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="mvn" workingdir="trunk/">
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <test src="trunk/reports/cucumber-pretty" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="CUCUMBER_TESTS_QA_ENV" isLocked="false">
      <environmentvariables>
        <variable name="envFile">
          <value>qa_envfile</value>
        </variable>
        <variable name="admin" secure="true">
          <encryptedValue>ZD2tpQViKMsENK8vB3OC6w==</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <svn url="https://github.com/media-centre/MCCucumberTests.git" username="PranathiB" encryptedPassword="bl3EoVprCReqkT263MzRUQ==" />
      </materials>
      <stage name="MAVEN_TASKS">
        <approval type="manual" />
        <jobs>
          <job name="MAVEN_COMPILE">
            <tasks>
              <exec command="mvn" workingdir="trunk/">
                <arg>compile</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="QA_RUN_STAGE">
        <approval type="manual" />
        <jobs>
          <job name="TEST_ON_CHROME_BROWSER">
            <environmentvariables>
              <variable name="fileName">
                <value>qa_envfile</value>
              </variable>
              <variable name="browser">
                <value>chrome</value>
              </variable>
              <variable name="admin" secure="true">
                <encryptedValue>ZD2tpQViKMsENK8vB3OC6w==</encryptedValue>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="mvn" workingdir="trunk/">
                <arg>test</arg>
              </exec>
            </tasks>
            <tabs>
              <tab name="Reports" path="reports" />
            </tabs>
            <artifacts>
              <test src="reports/cucumber-pretty" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="CUCUMBER_TESTS_PREPROD_ENV" isLocked="false">
      <environmentvariables>
        <variable name="envFile">
          <value>preprod_envfile</value>
        </variable>
      </environmentvariables>
      <materials>
        <svn url="https://github.com/media-centre/MCCucumberTests.git" username="PranathiB" encryptedPassword="bl3EoVprCReqkT263MzRUQ==" />
      </materials>
      <stage name="MAVEN_STAGE">
        <approval type="manual" />
        <jobs>
          <job name="MAVEN_COMPILE">
            <tasks>
              <exec command="mvn" workingdir="trunk/">
                <arg>compile</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="PREPROD_RUN_STAGE">
        <jobs>
          <job name="TEST_ON_CHROME_BROWSER">
            <environmentvariables>
              <variable name="fileName">
                <value>preprod_envfile</value>
              </variable>
              <variable name="browser">
                <value>chrome</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="mvn" workingdir="trunk/">
                <arg>test</arg>
              </exec>
            </tasks>
            <artifacts>
              <test src="reports/cucumber-pretty" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="build_template">
      <stage name="build">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>./build.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar czf ./dist.tar.gz ./dist</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="UnitTest">
        <jobs>
          <job name="unit-test">
            <tasks>
              <exec command="gulp" workingdir="trunk">
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="StaticCodeAnalyser">
        <jobs>
          <job name="eslint">
            <tasks>
              <exec command="gulp" workingdir="trunk">
                <arg>eslint</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="ServerTests">
        <jobs>
          <job name="ServerTests">
            <tasks>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar czf dist.tar.gz dist</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>/etc/ContentDiscovery/delete_fake_server_cleanly.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/deployment.yml -u go -i ./dist/ansible/deployment/inventories/server-tests -c local</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>pm2 start --name ContentDiscoveryFakeServer ./testserver/server.js</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>gulp functional:test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="DevelopmentDeployment">
      <stage name="StartServer" artifactCleanupProhibited="true">
        <approval type="manual" />
        <jobs>
          <job name="UntarAndStartServer">
            <environmentvariables>
              <variable name="NODE_ENV">
                <value>ci_dev</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="ServerTests" stage="build" job="build" srcfile="dist.tar.gz" dest="trunk">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar -xzf dist.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/deployment.yml -u go -i ./dist/ansible/deployment/inventories/dev -c local</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="CUCUMBER_TEST_TEMPLATE">
      <stage name="CUCUMBER_DEV">
        <jobs>
          <job name="CUCUMBER_DEV_ENV">
            <tasks>
              <exec command="mvn" workingdir="trunk/">
                <arg>test</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <environments>
    <environment name="DevDeployment">
      <environmentvariables>
        <variable name="NODE_ENV">
          <value>development</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="fd03899d-7788-47b9-afee-e8036b0060e1" />
      </agents>
      <pipelines>
        <pipeline name="DevelopmentDeployment" />
      </pipelines>
    </environment>
    <environment name="QaDeployment">
      <agents>
        <physical uuid="4b9908c8-79eb-458d-9156-aedfa687dcd3" />
      </agents>
      <pipelines>
        <pipeline name="QaDeployment" />
      </pipelines>
    </environment>
    <environment name="PreprodEnvironment">
      <agents>
        <physical uuid="d029afb8-6952-4776-9146-848dad530f73" />
      </agents>
      <pipelines>
        <pipeline name="PreprodDeployment" />
      </pipelines>
    </environment>
    <environment name="CUCUMBER_TESTS">
      <agents>
        <physical uuid="eced3a06-ffe8-40f7-b82a-26a4055d3d99" />
      </agents>
      <pipelines>
        <pipeline name="CUCUMBER_TESTS_DEV_ENV" />
        <pipeline name="CUCUMBER_TESTS_PREPROD_ENV" />
        <pipeline name="CUCUMBER_TESTS_QA_ENV" />
      </pipelines>
    </environment>
    <environment name="CUCUMBER_DEV_ENV">
      <agents>
        <physical uuid="eced3a06-ffe8-40f7-b82a-26a4055d3d99" />
      </agents>
    </environment>
    <environment name="ServerTests">
      <agents>
        <physical uuid="0f2f1c30-0220-4d72-bf45-976d0a65e92d" />
      </agents>
      <pipelines>
        <pipeline name="ServerTests" />
      </pipelines>
    </environment>
    <environment name="ProductionEnvironment">
      <agents>
        <physical uuid="dabe3c91-d4fc-438a-8a94-b4aff5bda4ae" />
      </agents>
      <pipelines>
        <pipeline name="ProductionDeployment" />
      </pipelines>
    </environment>
    <environment name="prod-unit-test">
      <agents>
        <physical uuid="252e4e5a-950f-4cea-91a3-e5c33b409dff" />
      </agents>
      <pipelines>
        <pipeline name="ReleaseBuildTests" />
      </pipelines>
    </environment>
    <environment name="prod-dev-box">
      <agents>
        <physical uuid="0f165179-28b8-4698-acc8-e628a253f1f3" />
      </agents>
      <pipelines>
        <pipeline name="ReleaseDevBox" />
      </pipelines>
    </environment>
    <environment name="hardening">
      <pipelines>
        <pipeline name="HardeningTests" />
      </pipelines>
    </environment>
    <environment name="newInternationalQA">
      <agents>
        <physical uuid="ad3e7c14-ec9f-476a-9869-cb386bf56758" />
      </agents>
      <pipelines>
        <pipeline name="QA" />
      </pipelines>
    </environment>
    <environment name="newsClickQA">
      <agents>
        <physical uuid="b203c505-cdbf-4184-b6ad-0dca1bda1ac0" />
      </agents>
      <pipelines>
        <pipeline name="newsClickQA" />
      </pipelines>
    </environment>
    <environment name="newsClickPreProd">
      <agents>
        <physical uuid="3b6a8412-5f29-49c3-abc0-378d51568012" />
      </agents>
      <pipelines>
        <pipeline name="newsClickPreProd" />
      </pipelines>
    </environment>
    <environment name="NewsClick_Prod">
      <agents>
        <physical uuid="0c053944-9962-414c-883a-c7e2a45cf176" />
      </agents>
      <pipelines>
        <pipeline name="newsClickProd" />
      </pipelines>
    </environment>
  </environments>
  <agents>
    <agent hostname="Dev-Env" ipaddress="10.19.0.6" uuid="fd03899d-7788-47b9-afee-e8036b0060e1" />
    <agent hostname="ServerTests" ipaddress="10.19.0.12" uuid="0f2f1c30-0220-4d72-bf45-976d0a65e92d" />
    <agent hostname="Test-Env" ipaddress="10.19.0.11" uuid="4b9908c8-79eb-458d-9156-aedfa687dcd3" />
    <agent hostname="preprodenv" ipaddress="10.19.0.8" uuid="d029afb8-6952-4776-9146-848dad530f73" />
    <agent hostname="production-env" ipaddress="10.19.0.14" uuid="dabe3c91-d4fc-438a-8a94-b4aff5bda4ae" />
    <agent hostname="prod-unit-test" ipaddress="10.19.0.16" uuid="252e4e5a-950f-4cea-91a3-e5c33b409dff" />
    <agent hostname="prod-dev-box" ipaddress="10.19.0.17" uuid="0f165179-28b8-4698-acc8-e628a253f1f3" />
    <agent hostname="buildMoniterMediaCenter" ipaddress="10.136.126.18" uuid="eced3a06-ffe8-40f7-b82a-26a4055d3d99">
      <resources>
        <resource>Automation</resource>
      </resources>
    </agent>
    <agent hostname="newIntCi" ipaddress="10.19.0.7" uuid="ad3e7c14-ec9f-476a-9869-cb386bf56758" />
    <agent hostname="newsClickQA" ipaddress="10.19.0.9" uuid="b203c505-cdbf-4184-b6ad-0dca1bda1ac0" />
    <agent hostname="NewsClickPreProd" ipaddress="10.19.0.15" uuid="3b6a8412-5f29-49c3-abc0-378d51568012" />
    <agent hostname="ip-172-31-32-23" ipaddress="172.31.32.23" uuid="0c053944-9962-414c-883a-c7e2a45cf176" />
  </agents>
</cruise>