<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="75">
  <server artifactsdir="artifacts" commandRepositoryLocation="default" serverId="ebe86205-7318-4fec-afb3-d346b355db74">
    <security>
      <passwordFile path="/var/lib/go-server/passwd-file" />
    </security>
  </server>
  <pipelines group="MediaCenter">
    <pipeline name="build" isLocked="false" template="build_template">
      <materials>
        <svn url="https://github.com/media-centre/ContentDiscovery.git" username="vikramkb" encryptedPassword="dyVI49BHqhUj5+3/2LWK441W26TcdIyBxrnoXmLCj+t/izDbtLN/5qqb7I5Og6jp3Z7BHPwyrNE=" />
      </materials>
    </pipeline>
    <pipeline name="DevelopmentDeployment" template="DevelopmentDeployment">
      <materials>
        <pipeline pipelineName="build" stageName="build" materialName="build" />
      </materials>
    </pipeline>
    <pipeline name="QaDeployment">
      <environmentvariables>
        <variable name="NODE_ENV">
          <value>ci_qa</value>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="DevelopmentDeployment" stageName="StartServer" materialName="Development" />
      </materials>
      <stage name="StartServer">
        <jobs>
          <job name="UntarAndStartServer">
            <environmentvariables>
              <variable name="NODE_ENV">
                <value>qa</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="DevelopmentDeployment" stage="StartServer" job="UntarAndStartServer" srcfile="dist.tar.gz" dest="trunk">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar -xzf dist.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/qa-deployment.yml -u go -i ./dist/ansible/deployment/inventories/qa -c local</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>sed -i -e 's/var CONTENT_DISCOVERY_ENVIRONMENT = "development";/var CONTENT_DISCOVERY_ENVIRONMENT = "ci_qa";/g' /home/go/ContentDiscovery/dist/client/app.js</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="PreprodDeployment">
      <materials>
        <pipeline pipelineName="QaDeployment" stageName="StartServer" />
      </materials>
      <stage name="StartServer" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="AnsibleDeploymentTask">
            <tasks>
              <fetchartifact pipeline="QaDeployment" stage="StartServer" job="UntarAndStartServer" srcfile="dist.tar.gz" dest="trunk">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar -xzf dist.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/preprod-deployment.yml -u go -i ./dist/ansible/deployment/inventories/pre-prod -c local</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>sed -i -e 's/var CONTENT_DISCOVERY_ENVIRONMENT = "development";/var CONTENT_DISCOVERY_ENVIRONMENT = "pre-prod";/g' /home/go/ContentDiscovery/dist/client/app.js</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="build_template">
      <stage name="build">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>./build.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="UnitTest">
        <jobs>
          <job name="unit-test">
            <tasks>
              <exec command="gulp" workingdir="trunk">
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="StaticCodeAnalyser">
        <jobs>
          <job name="eslint">
            <tasks>
              <exec command="gulp" workingdir="trunk">
                <arg>eslint</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="DevelopmentDeployment">
      <stage name="StartServer" artifactCleanupProhibited="true">
        <approval type="manual" />
        <jobs>
          <job name="UntarAndStartServer">
            <environmentvariables>
              <variable name="NODE_ENV">
                <value>ci_dev</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="build" stage="build" job="build" srcfile="dist.tar.gz" dest="trunk">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>tar -xzf dist.tar.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>ansible-playbook -vvvv ./dist/ansible/deployment/dev-deployment.yml -u go -i ./dist/ansible/deployment/inventories/dev -c local</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="trunk">
                <arg>-c</arg>
                <arg>sed -i -e 's/var CONTENT_DISCOVERY_ENVIRONMENT = "development";/var CONTENT_DISCOVERY_ENVIRONMENT = "ci_dev";/g' /home/go/ContentDiscovery/dist/client/app.js</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="trunk/dist.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <environments>
    <environment name="DevDeployment">
      <environmentvariables>
        <variable name="NODE_ENV">
          <value>development</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="fd03899d-7788-47b9-afee-e8036b0060e1" />
      </agents>
      <pipelines>
        <pipeline name="DevelopmentDeployment" />
      </pipelines>
    </environment>
    <environment name="QaDeployment">
      <agents>
        <physical uuid="67c1a041-f3c6-4c87-b206-766ac2b55ef7" />
      </agents>
      <pipelines>
        <pipeline name="QaDeployment" />
      </pipelines>
    </environment>
    <environment name="PreprodEnvironment">
      <agents>
        <physical uuid="30b3f773-06f0-4966-a7b3-5a1128ccb059" />
      </agents>
      <pipelines>
        <pipeline name="PreprodDeployment" />
      </pipelines>
    </environment>
  </environments>
  <agents>
    <agent hostname="continuousintegrationserver" ipaddress="10.19.0.5" uuid="2eb05fac-008c-4e6e-b794-916c26121dd3" />
    <agent hostname="Dev-Env" ipaddress="10.19.0.6" uuid="fd03899d-7788-47b9-afee-e8036b0060e1" />
    <agent hostname="Testing-Env" ipaddress="10.19.0.7" uuid="67c1a041-f3c6-4c87-b206-766ac2b55ef7" />
    <agent hostname="preprodenv" ipaddress="10.19.0.8" uuid="30b3f773-06f0-4966-a7b3-5a1128ccb059" />
  </agents>
</cruise>
